Exercise: Build a Simple Blog API
This exercise tests knowledge from Points 1, 2, and 3, covering Express setup, routing, middleware, and request-response handling.

ðŸ“Œ Requirements
Create a Blog API that allows users to manage blog posts.
Task 1: Set Up Express Server
Initialize a Node.js project (npm init -y).
Install Express (npm install express).
Create an index.js file and set up an Express server listening on port 4000.

let blogs = [
    {
        'id': 1,
        'title': 'some title',
        'body': 'some body',
        'author': 'some author'
    },
    {
        'id': 2,
        'title': 'title2',
        'body': 'body 2',
        'author': 'some author2'
    }
]

Task 2: Implement API Routes
GET / â†’ Returns a welcome message.
GET /posts â†’ Returns a list of all blog posts.
GET /posts/:id â†’ Returns a single post based on id. (PARAMS)
POST /posts â†’ Accepts JSON body { id,title, content,author } and creates a new post.
PUT /posts/:id â†’ Updates an existing post.
DELETE /posts/:id â†’ Deletes a post.
ðŸ‘‰ Use an array to store posts (no database needed). Each post should have { id, title, content,author }.

Task 3: Implement Middleware
Global Logger Middleware â†’ Logs each request's method and URL.
Validation Middleware - validate 
Body Parser Middleware â†’ Use express.json() to parse JSON body.
404 Middleware â†’ Returns "Route not found" for invalid routes.

Task 4: Handle Request Data Properly
-- Extract route parameters (:id) to find a post.
-- Use query parameters (?search=author) to filter posts by author.
-- Send appropriate status codes (200, 201, 400, 404).

ðŸ“Œ Bonus Challenge
-- Validate request body (Ensure title and content exist before creating a post).
-- Use res.status() for error handling (e.g., return 400 Bad Request if input is invalid).


ðŸŽ¯ Expected Learning Outcomes
âœ… Express server setup âœ… RESTful routes (GET, POST, PUT, DELETE) âœ… Middleware implementation (logger, body parser, error handling) âœ… Request data handling (req.params, req.query, req.body, req.headers) âœ… Sending proper responses with res.json(), res.status(), and res.send()

This exercise ensures they understand routing, middleware, and request-response handling before moving on to databases and authentication. ðŸš€

